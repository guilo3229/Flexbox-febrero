/* Regla CSS consta de 2 partes:
 1) EL selector
 2) Bloque de declaraciones:
 atributo: valor;
 Si el atributo tiene mas de 2 palabras: atributo-de-mas-dos-palabras: otro-valor; */
@import url(otra-hoja.css);
/* @import mala practica porque al recargar una pagina, bloquea la instruccion hasta que no obtine todo el contenido toda esa hoja parando la lectura HTML
Son bloqueantes porque on bloqueantes a la hora de que el navegador lee esta instrucci√≥n exceptuando con SAS eso es troa cosa */
h1 {
  color: orangered;
  background-color: black;
}

/* 
Links de referencia y documentacion
  - https://es.wikipedia.org/wiki/Hoja_de...
  - https://www.w3.org/html/logo/
  - https://www.w3.org/standards/webdesig...
  - https://www.w3.org/TR/css-2020/
  - https://developer.mozilla.org/es/docs...
üîµ CSS Reference - https://cssreference.io/
üîµ Can I Use - https://caniuse.com/
üîµ Code Guide - https://codeguide.co/
*/

/* Selectores B√°sicos:
  1)Etiquetas - son elementos html
  2)Identificadores - atributos id - #
  3)clases - atributo class - .

*/

p {
  color: midnightblue;
}

/* Dar estilos con ID es un anti-patron, porque es como una clave,normalmente no se usa solo sirve para solo un solo identificador, se usa mas para interactividades con Javascript */
#parrafo-dos {
  background-color: skyblue;
}

/* Dar estilos con clases nos permite reutilizar nuestro codigo CSS, el orden de definicion de nuestras clses no importa en principio pero es mejor ordenarlas en orden alfabetico para tener una metodolog√≠a */

.bg-skyblue {
  background-color: skyblue;
}

.bg-steelblue {
  background-color: steelblue;
}
.text-20 {
  font-size: 20px;
}
.text-32 {
  font-size: 32px;
}

.text-white {
  color: white;
}
/* El simbolo > apica solo para hijos directos a todos parece ser */
.hijos-directos > li {
  background-color: thistle;
}
/* El espacio hace referencia a todos los hijos descendientes sin importar en el orden o el nivel que esten de ese elemento que esta tras eel espacio */
.hijos-descendientes b {
  background-color: thistle;
}

/* Para el selector de hermanos en general se usa la virguilla altGR+4 y espacio ~, aplicara los estilos a los hermanos que estan por debajo sin contarse a si mismo/os  */
.hermanos-general ~ li {
  background-color: thistle;
}
/* Para el selector de hermanos adyacentes se usa la suma, aplicara estilos solamente al hermano siguiente que este por debajo sin contarse a el mismo.
Tanto como para el hermano en general como el adyacente si el tipo de hermano no coincide con el que el tipo indicado(por ejemplo en estos casos li) no se pasara al siguiente buscando este tipo es decir no pasara absolutamente nada si hay otro tipo de hermano intercalado y no por lo tanto no funcionara. */
.hermanos-adyacentes + li {
  background-color: thistle;
}

/* Selectores atributos */

.selectores-atributos a[href] {
  color: orangered;
}
.selectores-atributos a[target="_blank"] {
  font-weight: bold;
}
/* Para los selectores de atributos si usas el * antes del igual , lo que este entrecomillado sera que tenga dicha palabra en alguna parte, no debe tener mas caracteres ni estar dividida */

/* El comodin del asterisco aplica el estilo si contiene la palabra en cuestion */
.selectores-atributos a[href*="jonmircha"] {
  font-size: 23px;
}
/* El ^ es que se va a aplicar siempre y cuando se empiece con dicha palabra */
.selectores-atributos a[href^="http:"] {
  text-decoration: none;
}
/* El $ es que se va a aplicar el estilo si contiene el texto en cuestion al final*/
.selectores-atributos a[href$=".com/"] {
  background-color: black;
}
/* El comodin del ~ aplica el estilo si contiene   el texto en cuestion en una lista separada por espacios*/
.selectores-atributos a[class~="cursos"] {
  background-color: midnightblue;
}
/* El comodin | aplica el estilo si contiene el texto en cuestion en una lista separada por espacios y que despues del texto en cuestion venga un gui√≥n medio - obligado */
.selectores-atributos a[class|="menu"] {
  font-style: italic;
}

/* Selector universal (*) puede hacerse en el contexto si va despues de otro selector como de clase etc */

* {
  font-family: sans-serif;
}

.selector-universal * {
  font-size: 24px;
}

/* 
Pseudoclases - Dan estilos dependiendo del contexto, posici√≥n o estado del elemento.
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
*/
/* En este caso :required seria un estado requerido y recordar el * es para todos que esten dentro del form */
.form-pseudoclases *:required {
  border-color: yellow;
}
.form-pseudoclases *:valid {
  border-color: green;
}
.form-pseudoclases *:invalid {
  border-color: red;
}

.form-pseudoclases *:focus {
  background-color: skyblue;
}
.form-pseudoclases *:disabled {
  background-color: pink;
}
.menu-pseudoclases a:visited {
  color: olive;
}
/* Para que no afecte por cascada de posicion el estado hover deberia estar al final porque al ser un estado interactivo.
Importa link->visited->hover */
.menu-pseudoclases a:hover {
  color: orange;
}

.p-pseudoclases:hover {
  font-size: 20px;
}
/* Se puede usar para cambiar cosas con el target, sirve para hacer cosas moviles sin usar javascript por ejemplo */
#temario-css:target {
  background-color: lightgreen;
}

.lista-pseudoclases li:first-child {
  color: green;
}
.lista-pseudoclases li:last-child {
  color: violet;
}
.lista-pseudoclases li:nth-child(4n) {
  font-size: 20px;
}
/* odd para impares even pares, aveces no funciona bien y funciona al reves ojo!! */
.lista-pseudoclases li:nth-child(even) {
  background-color: orange;
}
.lista-pseudoclases li:nth-child(odd) {
  background-color: yellow;
}
/* Si el primer hijo no es un p y en nuestro caso es una header no funcionara ya que esta no es un  p, para solucionar esto hay que poner first-of-type entonces buscara el primer hijo de dicha "clase" */
.articulo-pseudoclases p:first-of-type {
  background-color: pink;
}
.articulo-pseudoclases p:last-of-type {
  background-color: violet;
}
.articulo-pseudoclases p:nth-of-type(2) {
  background-color: fuchsia;
}
/* Este ultimo es de negacion dice todos los hijos menos los que esten dentro del parentesis */
.articulo-pseudoclases *:not(p, footer) {
  background-color: beige;
}

/* Pseudoelementos - Dan estilos a partes espec√≠ficas de un elmento, se usa el :: para diferenciarlos de las pseudoclases 
https://developer.mozilla.org/es/docs/Web/CSS/Pseudoelementos
*/

.saga-geminis::before {
  content: " ü§º‚Äç‚ôÇÔ∏è ";
}
.saga-geminis::after {
  content: " üëæ ";
}

.saga-precio::before {
  content: " $ ";
  font-weight: bold;
}
.saga-precio::after {
  content: " USD ";
  font-weight: bold;
}

.p-pseudoelementos::first-letter {
  font-weight: bold;
  font-size: 32px;
}
.p-pseudoelementos::first-line {
  color: coral;
}
.p-pseudoelementos::selection {
  color: greenyellow;
  background-color: black;
}

.input-pseudoelementos::placeholder {
  background-color: greenyellow;
}

/* Agrupar Selectores */

.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea {
  border-color: yellow;
  border-width: 2px;
  border-style: dashed;
  background-color: black;
  font-size: 20px;
  display: block;
  width: 300px;
}

/* 
  El Algoritmo de CSS: Es la forma en que el navegador aplica los estilos al documento HTML. Es vital entender este concepto para que entiendas como se aplican y en algunas ocasiones se sobreescriben las reglas CSS.
  
    1) La C√°scada.
    2) La Especificidad.
    3) La Herencia.

  La C√°scada es el mecanismo en que el navegador aplica los estilos. Y toma en cuenta lo siguiente en este orden:

    1) El Origen del C√≥digo:
      -El User Agent(los estilos por defeco del navegador)
      -Personalizaciones del usuario.
      -Los estilos del autor.
    2) La especificidad del Selector
    3) Orden de Aparici√≥n

  La Especificidad es el peso que tiene un selector cuadno hay conflicto de estilos. Se calcula de la siguiente forma:

    Etiquetas y pseudoelementos --------0,0,0,1
    Clases,atributos y pseudoclases ----0,0,1,0
    Identtificadores -------------------0,1,0,0
    Estilos en l√≠nea -------------------1,0,0,0
    !important-----------Rompe la especificidad

La Herencia, es la capacidad de un selector de obtener (heredar) los valores de sus ancestros m√°s cercanos, para aplicarla se usa el valor


https://web.dev/learn/css/inheritance/#which-properties-are-inheritable
*/
blockquote#cita-marco.cita-marco {
  background-color: lightsteelblue;
}
blockquote {
  background-color: burlywood;
}
#cita-marco {
  background-color: lightgreen;
}
blockquote.cita-marco {
  background-color: tomato;
}
.cita-marco {
  background-color: cornflowerblue;
}

.cita-marco {
  background-color: mediumaquamarine !important;
}
blockquote#cita-marco {
  background-color: lightsalmon;
}

.cita-marco {
  background-color: darkorange !important;
  font-size: 32px;
  border-style: dotted;
  border-color: red;
}

.cita-marco cite {
  background-color: inherit;
  font-size: initial;
  border-style: inherit;
  border-color: inherit;
}

/* 
https://autoprefixer.github.io/
https://caniuse.com/

Prefijos de los navegadores 
-webkit-user-select: none;
-moz-user-select:none;
-ms-user-select:none; 
-user-select:none; 
*/
